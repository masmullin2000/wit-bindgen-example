#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
pub mod say {
    #[allow(unused_imports)]
    use wit_bindgen_wasmtime::{wasmtime, anyhow};
    /// Auxiliary data associated with the wasm exports.
    ///
    /// This is required to be stored within the data of a
    /// `Store<T>` itself so lifting/lowering state can be managed
    /// when translating between the host and wasm.
    pub struct SayData {}
    #[automatically_derived]
    #[allow(unused_qualifications)]
    impl ::core::default::Default for SayData {
        #[inline]
        fn default() -> SayData {
            SayData {}
        }
    }
    pub struct Say<T> {
        get_state: Box<dyn Fn(&mut T) -> &mut SayData + Send + Sync>,
        canonical_abi_free: wasmtime::TypedFunc<(i32, i32, i32), ()>,
        canonical_abi_realloc: wasmtime::TypedFunc<(i32, i32, i32, i32), i32>,
        hello: wasmtime::TypedFunc<(i32, i32), (i32,)>,
        memory: wasmtime::Memory,
    }
    impl<T> Say<T> {
        #[allow(unused_variables)]
        /// Adds any intrinsics, if necessary for this exported wasm
        /// functionality to the `linker` provided.
        ///
        /// The `get_state` closure is required to access the
        /// auxiliary data necessary for these wasm exports from
        /// the general store's state.
        pub fn add_to_linker(
            linker: &mut wasmtime::Linker<T>,
            get_state: impl Fn(&mut T) -> &mut SayData + Send + Sync + Copy + 'static,
        ) -> anyhow::Result<()> {
            Ok(())
        }
        /// Instantiates the provided `module` using the specified
        /// parameters, wrapping up the result in a structure that
        /// translates between wasm and the host.
        ///
        /// The `linker` provided will have intrinsics added to it
        /// automatically, so it's not necessary to call
        /// `add_to_linker` beforehand. This function will
        /// instantiate the `module` otherwise using `linker`, and
        /// both an instance of this structure and the underlying
        /// `wasmtime::Instance` will be returned.
        ///
        /// The `get_state` parameter is used to access the
        /// auxiliary state necessary for these wasm exports from
        /// the general store state `T`.
        pub fn instantiate(
            mut store: impl wasmtime::AsContextMut<Data = T>,
            module: &wasmtime::Module,
            linker: &mut wasmtime::Linker<T>,
            get_state: impl Fn(&mut T) -> &mut SayData + Send + Sync + Copy + 'static,
        ) -> anyhow::Result<(Self, wasmtime::Instance)> {
            Self::add_to_linker(linker, get_state)?;
            let instance = linker.instantiate(&mut store, module)?;
            Ok((Self::new(store, &instance, get_state)?, instance))
        }
        /// Low-level creation wrapper for wrapping up the exports
        /// of the `instance` provided in this structure of wasm
        /// exports.
        ///
        /// This function will extract exports from the `instance`
        /// defined within `store` and wrap them all up in the
        /// returned structure which can be used to interact with
        /// the wasm module.
        pub fn new(
            mut store: impl wasmtime::AsContextMut<Data = T>,
            instance: &wasmtime::Instance,
            get_state: impl Fn(&mut T) -> &mut SayData + Send + Sync + Copy + 'static,
        ) -> anyhow::Result<Self> {
            let mut store = store.as_context_mut();
            let canonical_abi_free = instance
                .get_typed_func::<(i32, i32, i32), (), _>(&mut store, "canonical_abi_free")?;
            let canonical_abi_realloc = instance.get_typed_func::<(i32, i32, i32, i32), i32, _>(
                &mut store,
                "canonical_abi_realloc",
            )?;
            let hello = instance.get_typed_func::<(i32, i32), (i32,), _>(&mut store, "hello")?;
            let memory = instance.get_memory(&mut store, "memory").ok_or_else(|| {
                ::anyhow::private::must_use({
                    let error = ::anyhow::private::format_err(::core::fmt::Arguments::new_v1(
                        &["`memory` export not a memory"],
                        &[],
                    ));
                    error
                })
            })?;
            Ok(Say {
                canonical_abi_free,
                canonical_abi_realloc,
                hello,
                memory,
                get_state: Box::new(get_state),
            })
        }
        pub fn hello(
            &self,
            mut caller: impl wasmtime::AsContextMut<Data = T>,
            name: &str,
        ) -> Result<String, wasmtime::Trap> {
            let func_canonical_abi_free = &self.canonical_abi_free;
            let func_canonical_abi_realloc = &self.canonical_abi_realloc;
            let memory = &self.memory;
            let vec0 = name;
            let ptr0 =
                func_canonical_abi_realloc.call(&mut caller, (0, 0, 1, vec0.len() as i32))?;
            memory
                .data_mut(&mut caller)
                .store_many(ptr0, vec0.as_bytes())?;
            let (result1_0,) = self.hello.call(&mut caller, (ptr0, vec0.len() as i32))?;
            let load2 = memory.data_mut(&mut caller).load::<i32>(result1_0 + 0)?;
            let load3 = memory.data_mut(&mut caller).load::<i32>(result1_0 + 4)?;
            let ptr4 = load2;
            let len4 = load3;
            let data4 = copy_slice(&mut caller, memory, ptr4, len4, 1)?;
            func_canonical_abi_free.call(&mut caller, (ptr4, len4, 1))?;
            Ok(String::from_utf8(data4).map_err(|_| wasmtime::Trap::new("invalid utf-8"))?)
        }
    }
    use wit_bindgen_wasmtime::rt::RawMem;
    use wit_bindgen_wasmtime::rt::copy_slice;
}
const _: &str = "hello: function(name: string) -> string\n";
use anyhow::Result;
use wit_bindgen_wasmtime::wasmtime::{self, Config, Engine, Instance, Linker, Module, Store};
fn main() {
    let path = "./target/wasm32-wasi/release/guest.wasm";
    let path2 = "./target/wasm32-wasi/release/guest2.wasm";
    run(path, "Michael");
    run(path2, "Douglas");
}
fn run(path: &str, name: &str) {
    use say::{Say, SayData};
    type SayStore = Store<Context<SayData, SayData>>;
    if let Ok((exports, mut store)) = instantiate(path, |store: &mut SayStore, module, linker| {
        Say::instantiate(store, module, linker, |cx| &mut cx.exports)
    }) {
        let s = std::time::Instant::now();
        for i in 0..100 {
            match exports.hello(&mut store, name) {
                Ok(reply) => {
                    ::std::io::_print(::core::fmt::Arguments::new_v1(
                        &["reply ", " ", "\n"],
                        &[
                            ::core::fmt::ArgumentV1::new_display(&i),
                            ::core::fmt::ArgumentV1::new_display(&reply),
                        ],
                    ));
                }
                Err(e) => {
                    ::std::io::_print(::core::fmt::Arguments::new_v1(
                        &["blarg ", " ", "\n"],
                        &[
                            ::core::fmt::ArgumentV1::new_display(&i),
                            ::core::fmt::ArgumentV1::new_display(&e),
                        ],
                    ));
                }
            }
        }
        let wasm_time = s.elapsed();
        {
            ::std::io::_print(::core::fmt::Arguments::new_v1(
                &["it took ", " to run\n"],
                &[::core::fmt::ArgumentV1::new_display(&wasm_time.as_millis())],
            ));
        };
        let s1 = std::time::Instant::now();
        for i in 0..10 {
            let reply = native_hello("Michael".to_string());
            {
                ::std::io::_print(::core::fmt::Arguments::new_v1(
                    &["reply ", " ", "\n"],
                    &[
                        ::core::fmt::ArgumentV1::new_display(&i),
                        ::core::fmt::ArgumentV1::new_display(&reply),
                    ],
                ));
            };
        }
        let native_time = s1.elapsed();
        {
            ::std::io::_print(::core::fmt::Arguments::new_v1(
                &["it took ", " to run\n"],
                &[::core::fmt::ArgumentV1::new_display(&wasm_time.as_millis())],
            ));
        };
        {
            ::std::io::_print(::core::fmt::Arguments::new_v1(
                &["it took ", " to run\n"],
                &[::core::fmt::ArgumentV1::new_display(
                    &native_time.as_millis(),
                )],
            ));
        };
    }
}
fn native_hello(name: String) -> String {
    {
        let res = ::alloc::fmt::format(::core::fmt::Arguments::new_v1(
            &["hello "],
            &[::core::fmt::ArgumentV1::new_display(&name)],
        ));
        res
    }
}
fn default_wasi() -> wasmtime_wasi::WasiCtx {
    wasmtime_wasi::sync::WasiCtxBuilder::new()
        .inherit_stdio()
        .build()
}
struct Context<I, E> {
    wasi: wasmtime_wasi::WasiCtx,
    imports: I,
    exports: E,
}
fn instantiate<'a, I: Default, E: Default, T>(
    wasm: &str,
    mk_exports: impl FnOnce(
        &mut Store<Context<I, E>>,
        &Module,
        &mut Linker<Context<I, E>>,
    ) -> Result<(T, Instance)>,
) -> Result<(T, Store<Context<I, E>>)> {
    let mut config = Config::new();
    config.cache_config_load_default()?;
    config.wasm_backtrace_details(wasmtime::WasmBacktraceDetails::Enable);
    let engine = Engine::new(&config)?;
    let module = Module::from_file(&engine, wasm)?;
    let mut linker = Linker::new(&engine);
    wasmtime_wasi::add_to_linker(&mut linker, |cx: &mut Context<I, E>| &mut cx.wasi)?;
    let mut store = Store::new(
        &engine,
        Context {
            wasi: default_wasi(),
            imports: I::default(),
            exports: E::default(),
        },
    );
    let (exports, _instance) = mk_exports(&mut store, &module, &mut linker)?;
    Ok((exports, store))
}
